'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Pitney Bowes
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"

'-------------------------------------
Include "Library\ARRAYLib.def"
Include "Library\CONFIGFILELib.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\HEXAGONLib.def"
Include "Library\STYLELib.def"
Include "Library\TABLELib.def"

Define	CTRL_CMD_OK				10
Define	CTRL_LST_HEXAGON_TYPES		100
Define	CTRL_TXT_SIZE				200
Define	CTRL_LBL_ESTIMATES			210
Define	CTRL_TXT_TAB_FILE			300
Define	CTRL_TXT_COORDSYS			310
Define	CTRL_LST_INPUT_TYPES		400
Define	CTRL_LST_MAP_WINDOWS		500

Include "DLGHexagonSettings.def"

Declare Sub DLGHSHandler_OnLoad
Declare Sub DLGHSHandler_InputTypeClicked
Declare Sub DLGHSHandler_MapClicked
Declare Sub DLGHSHandler_HexTypeClicked
Declare Sub DLGHSHandler_Estimate
Declare Sub DLGHSHandler_BrowseOutputFile
Declare Sub DLGHSHandler_OKClicked


Dim	mnMID, mnInputType, mnHexagonType, mnCalculationType As Integer,
	mfHexagonSize As Float,
	msUnit, msTabFile As String,
	marrMapWindowIDs(0) As Integer,
	marrMapWindowNames(0) As String,
	moSel As Object,
	mpenHexagon As Pen, mbrsHexagon As Brush,
	msConfigFile As String
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DLGHexagonSettings() As Logical

OnError GoTo ErrorOccured

DLGHexagonSettings = FALSE

	Call DLGHSSetHexagonExtentMID(FrontWindow())

	Dialog
		Title "Hexagon Settings"
		Calling DLGHSHandler_OnLoad

		Control StaticText
			Position 5,5
			Title "Create From"
		Control RadioGroup		ID CTRL_LST_INPUT_TYPES
			Position 5,15
			Title "Map Window;Selection"
			Value DLGHSInputType()
			Calling DLGHSHandler_InputTypeClicked
		Control PopUpMenu		ID CTRL_LST_MAP_WINDOWS
			Position 75,15		Width 230
			Calling DLGHSHandler_MapClicked


		Control StaticText
			Position 5,45
			Title "Hexagon Type"
		Control RadioGroup		ID CTRL_LST_HEXAGON_TYPES
			Position 5,55
			Title "Pointy Top;Flat Top"
			Value DLGHSHexagonType()
			Calling DLGHSHandler_HexTypeClicked

		Control StaticText
			Position 75,45
			Title "Hexagon Size (radius)"
		Control EditText		ID CTRL_TXT_SIZE
			Position 75,55		Width 100
			Value FormatNumber$(DLGHSHexagonSize())
		Control StaticText
			Position 180,57
			Title DLGHSHexagonUnit()

		Control StaticText
			Position 75,70	Width 100
			Title "Estimations:"
		Control StaticText		ID CTRL_LBL_ESTIMATES
			Position 75,80	Width 200

		Control StaticText
			Position 5,90
			Title "Hexagon Tab File"
		Control EditText		ID CTRL_TXT_TAB_FILE
			Position 5,100		Width 285
			Value DLGHSHexagonTabFile()
		Control Button
			Position 290,100	Width 15	Height 13
			Title "..."
			Calling DLGHSHandler_BrowseOutputFile

		Control StaticText
			Position 5,120
			Title "Coordsys"
		Control EditText		ID CTRL_TXT_COORDSYS
			Position 5,130		Width 300
			Disable

		Control StaticText
			Position 5,150		Width 260
			Title "Please note that Lat/Long based coordinate systems aren't supported"

		Control OKButton		ID CTRL_CMD_OK
			Position 265,150	Width 40
			Calling DLGHSHandler_OKClicked
		Control CancelButton
			Position 265,165	Width 40

		If NOT CommandInfo(CMD_INFO_DLG_OK) Then
			Exit Function
		End If

DLGHexagonSettings = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHexagonSettings")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSHandler_OnLoad

Dim	nWin, nNumProjectedMaps, nMapItem As Integer

OnError GoTo ErrorOccured

	Redim marrMapWindowIDs(0)
	Redim marrMapWindowNames(0)
	For nWin = 1 To NumWindows()
		If WindowInfo(WindowID(nWin), WIN_INFO_TYPE) = WIN_MAPPER Then
			Call ARRAYAddValueInteger(marrMapWindowIDs, WindowID(nWin))
			Call ARRAYAddValueString(marrMapWindowNames, WindowInfo(WindowID(nWin), WIN_INFO_NAME))
			nNumProjectedMaps	= nNumProjectedMaps + 1
			If WindowID(nWin) = DLGHSHexagonExtentMID() Then
				nMapItem = Ubound(marrMapWindowIDs)
			End If
		End If
	Next

	If SelectionInfo(SEL_INFO_NROWS) = 1 Then
		Fetch First From Selection
		Call DLGHSSetHexagonExtentOBJ(Selection.obj)

		If nNumProjectedMaps > 0 Then
			Alter Control CTRL_LST_INPUT_TYPES Enable
			Alter Control CTRL_LST_INPUT_TYPES Value DLGHSInputType()
			Alter Control CTRL_LST_MAP_WINDOWS	Title From Variable marrMapWindowNames
			Alter Control CTRL_LST_MAP_WINDOWS	Value Maximum(1, nMapItem)
		Else
			Alter Control CTRL_LST_MAP_WINDOWS	Title From Variable marrMapWindowNames
			Alter Control CTRL_LST_INPUT_TYPES Disable
			Alter Control CTRL_LST_INPUT_TYPES Value HEX_INPUT_TYPE_SELECTION
		End If
	Else
		If nNumProjectedMaps = 0 Then
			Note "You need to select one record or have at least one map using a projected coordinate system!"
			Alter Control CTRL_LST_MAP_WINDOWS	Title From Variable marrMapWindowNames
			Alter Control CTRL_LST_INPUT_TYPES Disable
			Alter Control CTRL_CMD_OK Disable
			Exit Sub
		Else
			Alter Control CTRL_LST_MAP_WINDOWS	Title From Variable marrMapWindowNames
			Alter Control CTRL_LST_MAP_WINDOWS	Value Maximum(1, nMapItem)
			Alter Control CTRL_LST_INPUT_TYPES Disable
			Alter Control CTRL_LST_INPUT_TYPES Value HEX_INPUT_TYPE_MAP
		End If
	End If

	Call DLGHSHandler_InputTypeClicked

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHandler_MapClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSHandler_InputTypeClicked

OnError GoTo ErrorOccured

	If ReadControlValue(CTRL_LST_INPUT_TYPES) = HEX_INPUT_TYPE_MAP Then
		Alter Control CTRL_LST_MAP_WINDOWS Enable
		Call DLGHSHandler_MapClicked
	Else
		Alter Control CTRL_LST_MAP_WINDOWS Disable
		Alter Control CTRL_TXT_COORDSYS Value TableInfo(Selection, TAB_INFO_COORDSYS_NAME)
		Call DLGHSHandler_Estimate
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHandler_InputTypeClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSHandler_MapClicked

Dim	nItem As Integer

OnError GoTo ErrorOccured

	nItem 	= ReadControlValue(CTRL_LST_MAP_WINDOWS)
	Call DLGHSSetHexagonExtentMID(marrMapWindowIDs(nItem))
	Alter Control CTRL_TXT_COORDSYS Value MapperInfo(DLGHSHexagonExtentMID(), MAPPER_INFO_COORDSYS_NAME)

	Set Window DLGHSHexagonExtentMID() Front

	Call DLGHSHandler_Estimate

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHandler_MapClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSHandler_HexTypeClicked

OnError GoTo ErrorOccured

	Call DLGHSHandler_Estimate
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHandler_HexTypeClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSHandler_Estimate

Dim	nSize, nType, nCalculationType As Integer,
	sNumHexagons, sNumRows, sNumColumns As String

OnError GoTo ErrorOccured

	nSize			= Val(DeformatNumber$(ReadControlValue(CTRL_TXT_SIZE)))
	nType			= ReadControlValue(CTRL_LST_HEXAGON_TYPES)
	nCalculationType	= HEX_CALC_TYPE_CARTESIAN

	If ReadControlValue(CTRL_LST_INPUT_TYPES) = HEX_INPUT_TYPE_MAP Then
		sNumHexagons	= FormatNumber$(HEXEstimateForMap(nSize, DLGHSHexagonUnit(), DLGHSHexagonExtentMID(), nCalculationType, nType))
	Else
		sNumHexagons	= FormatNumber$(HEXEstimateForObject(nSize, DLGHSHexagonUnit(), DLGHSHexagonExtentOBJ(), nCalculationType, nType))
	End If
	sNumRows		= FormatNumber$(HEXNumHexagonColumnsEstimated())
	sNumColumns	= FormatNumber$(HEXNumHexagonRowsEstimated())

	Alter Control CTRL_LBL_ESTIMATES	Title  "Hexagons: " & sNumHexagons & " Columns: " & sNumColumns & " Rows: " & sNumRows

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHandler_MapClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSHandler_BrowseOutputFile

Dim	sFile As String

OnError GoTo ErrorOccured

	sFile = ReadControlValue(CTRL_TXT_TAB_FILE)
	If sFile = "" Then
		sFile = PathToDirectory$(TempFileName$("")) & "Hexagons.tab"
	End If

	sFile = FileSaveAsDlg(PathToDirectory$(sFile), PathToFileName$(sFile), "TAB", "Specify folder and name of hexagon tab file...")
	If sFile = "" Then
		Exit Sub
	End If

	Alter Control CTRL_TXT_TAB_FILE Value sFile

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHandler_BrowseOutputFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSHandler_OKClicked

Dim nNumHexs As Integer

OnError GoTo ErrorOccured

	Call DLGHSSetInputType(ReadControlValue(CTRL_LST_INPUT_TYPES))
	Call DLGHSSetHexagonType(ReadControlValue(CTRL_LST_HEXAGON_TYPES))
	Call DLGHSSetCalculationType(HEX_CALC_TYPE_CARTESIAN)

	If Val(DeformatNumber$(ReadControlValue(CTRL_TXT_SIZE))) > 0 Then
		Call DLGHSSetHexagonSize(Val(DeformatNumber$(ReadControlValue(CTRL_TXT_SIZE))))
	Else
		Note "Please specify a hexagon size greater than 0!"
		Alter Control CTRL_TXT_SIZE Active
		Dialog Preserve
		Exit Sub
	End If

	If ReadControlValue(CTRL_TXT_TAB_FILE) <> "" Then
		Call DLGHSSetHexagonTabFile(ReadControlValue(CTRL_TXT_TAB_FILE))

		If FileExists(DLGHSHexagonTabFile()) Then
			If NOT Ask("Overwrite existing tab file: '" & DLGHSHexagonTabFile() & "'?", "Yes", "Abort") Then
				Alter Control CTRL_TXT_TAB_FILE Active
				Dialog Preserve
				Exit Sub
			End If
		ElseIf TABIsOpen(DLGHSHexagonTable()) Then
			If NOT Ask("Close currently open table named '" & DLGHSHexagonTable() & "'?", "Yes", "Abort") Then
				Alter Control CTRL_TXT_TAB_FILE Active
				Dialog Preserve
				Exit Sub
			End If
		End If
	Else
		Note "Please specify a hexagon tab file!"
		Alter Control CTRL_TXT_TAB_FILE Active
		Dialog Preserve
		Exit Sub
	End If

	Call DLGHSHandler_Estimate
	nNumHexs = HEXNumHexagonsEstimated()
	If nNumHexs > 250000 Then
		If Ask("You are creating around " & FormatNumber$(Round(nNumHexs, 10000)) & " hexagons! Do you want to continue?", "No", "Yes") Then
			Alter Control CTRL_TXT_SIZE Value FormatNumber$(DLGHSHexagonSize())
			Alter Control CTRL_TXT_SIZE Active
			Dialog Preserve
			Exit Sub
		End If
	End If


	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHandler_OKClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetInputType(ByVal nType As Integer)

OnError GoTo ErrorOccured

	mnInputType = nType
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetInputType")

End Sub
'**********************************************************************************************''
Function DLGHSInputType() As Integer

OnError GoTo ErrorOccured

	If mnInputType = 0 Then
		mnInputType = 1
	End If
	DLGHSInputType = mnInputType
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSInputType")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetHexagonType(ByVal nType As Integer)

OnError GoTo ErrorOccured

	mnHexagonType = nType
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetHexagonType")

End Sub
'**********************************************************************************************''
Function DLGHSHexagonType() As Integer

OnError GoTo ErrorOccured

	If mnHexagonType = 0 Then
		mnHexagonType = 1
	End If
	DLGHSHexagonType = mnHexagonType
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonType")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetCalculationType(ByVal nType As Integer)

OnError GoTo ErrorOccured

	mnCalculationType = nType
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetCalculationType")

End Sub
'**********************************************************************************************''
Function DLGHSCalculationType() As Integer

OnError GoTo ErrorOccured

	If mnCalculationType = 0 Then
		mnCalculationType	= 1
	End If
	DLGHSCalculationType = mnCalculationType
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSCalculationType")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetHexagonSize(ByVal fSize As Float)

OnError GoTo ErrorOccured

	mfHexagonSize = fSize
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetHexagonSize")

End Sub
'**********************************************************************************************''
Function DLGHSHexagonSize() As Float

OnError GoTo ErrorOccured

	If mfHexagonSize = 0 Then
		mfHexagonSize = 5000
	End If
	DLGHSHexagonSize = mfHexagonSize
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonSize")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetHexagonUnit(ByVal sUnit As String)

OnError GoTo ErrorOccured

	msUnit = sUnit
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetHexagonUnit")

End Sub
'**********************************************************************************************''
Function DLGHSHexagonUnit() As String

OnError GoTo ErrorOccured

	If msUnit = "" Then
		msUnit = "m"
	End If
	DLGHSHexagonUnit = msUnit
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonUnit")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetHexagonTabFile(ByVal sFile As String)

OnError GoTo ErrorOccured

	msTabFile = sFile
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetHexagonTabFile")

End Sub
'**********************************************************************************************''
Function DLGHSHexagonTabFile() As String

OnError GoTo ErrorOccured

	If msTabFile = "" Then
		msTabFile = PathToDirectory$(TempFileName$("")) & "Hexagons.tab"
	End If
	DLGHSHexagonTabFile = msTabFile
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonTabFile")

End Function
'**********************************************************************************************''
Function DLGHSHexagonTable() As String

OnError GoTo ErrorOccured

	DLGHSHexagonTable = PathToTableName$(DLGHSHexagonTabFile())
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonTable")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetHexagonExtentMID(ByVal nMID As Integer)

OnError GoTo ErrorOccured

	mnMID = nMID
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetHexagonExtentMID")

End Sub
'**********************************************************************************************''
Function DLGHSHexagonExtentMID() As Integer

OnError GoTo ErrorOccured

	DLGHSHexagonExtentMID = mnMID
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonExtentMID")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetHexagonExtentOBJ(ByVal oValue As Object)

OnError GoTo ErrorOccured

	moSel = oValue
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetHexagonExtentOBJ")

End Sub
'**********************************************************************************************''
Function DLGHSHexagonExtentOBJ() As Object

OnError GoTo ErrorOccured

	DLGHSHexagonExtentOBJ = moSel
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonExtentOBJ")

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSSetConfigFileName(ByVal sFile As String)

OnError GoTo ErrorOccured

	msConfigFile = sFile
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetConfigFileName")
	Call ERRShow()

End Sub

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetHexagonPen(ByVal penValue As Pen)

OnError GoTo ErrorOccured

	mpenHexagon = penValue
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetHexagonPen")

End Sub
'**********************************************************************************************''
Function DLGHSHexagonPen() As Pen

OnError GoTo ErrorOccured

	DLGHSHexagonPen = mpenHexagon
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonPen")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DLGHSSetHexagonBrush(ByVal brsValue As Brush)

OnError GoTo ErrorOccured

	mbrsHexagon = brsValue
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSSetHexagonBrush")

End Sub
'**********************************************************************************************''
Function DLGHSHexagonBrush() As Brush

OnError GoTo ErrorOccured

	DLGHSHexagonBrush = mbrsHexagon
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSHexagonBrush")

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSWriteConfigFile

OnError GoTo ErrorOccured

	Call CONFIGWriteKey(msConfigFile, "HEXAGONS", "TABFILE", DLGHSHexagonTabFile())
	Call CONFIGWriteKey(msConfigFile, "HEXAGONS", "TYPE", Str$(DLGHSHexagonType()))
	Call CONFIGWriteKey(msConfigFile, "HEXAGONS", "SIZE", Str$(DLGHSHexagonSize()))
	Call CONFIGWriteKey(msConfigFile, "HEXAGONS", "PENSTYLE", STLPen2Text(DLGHSHexagonPen()))
	Call CONFIGWriteKey(msConfigFile, "HEXAGONS", "BRUSHSTYLE", STLBrush2Text(DLGHSHexagonBrush()))

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSWriteConfigFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub DLGHSReadConfigFile

Dim	sValue As String

OnError GoTo ErrorOccured

	sValue	= CONFIGReadKey(msConfigFile, "HEXAGONS", "TABFILE")
	If NOT sValue = "" Then
		Call DLGHSSetHexagonTabFile(sValue)
	End If
	sValue	= CONFIGReadKey(msConfigFile, "HEXAGONS", "TYPE")
	If NOT sValue = "" Then
		Call DLGHSSetHexagonType(Val(sValue))
	End If
	sValue	= CONFIGReadKey(msConfigFile, "HEXAGONS", "SIZE")
	If NOT sValue = "" Then
		Call DLGHSSetHexagonSize(Val(sValue))
	End If
	sValue	= CONFIGReadKey(msConfigFile, "HEXAGONS", "PENSTYLE")
	If NOT sValue = "" Then
		Call DLGHSSetHexagonPen(STLText2Pen(sValue))
	Else
		Call DLGHSSetHexagonPen(CurrentBorderPen())
	End If
	sValue	= CONFIGReadKey(msConfigFile, "HEXAGONS", "BRUSHSTYLE")
	If NOT sValue = "" Then
		Call DLGHSSetHexagonBrush(STLText2Brush(sValue))
	Else
		Call DLGHSSetHexagonBrush(CurrentBrush())
	End If


	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DLGHSReadConfigFile")
	Call ERRShow()

End Sub
