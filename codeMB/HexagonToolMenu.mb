'*******************************************************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "Enums.def"
Include "Icons.def"
Include "MapBasic.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"
Include "Library\RibbonElements.def"

Define xProgram 		"HexagonTool"
Define xProgramMenu		"HexagonTool"
Define xVersion 		"1.20"
Define xYear			"2020"
Define xAddToMenuBar	FALSE

Define FILE_INI			GetFolderPath$(FOLDER_MI_PREFERENCE) & xProgram & ".ini"
Define FILE_DBG			ApplicationDirectory$() & xProgram & ".dbg"
'Define FILE_DLL			ApplicationDirectory$() & xProgram & ".dll"
Define FILE_PAD			GetFolderPath$(FOLDER_MI_PREFERENCE) & xProgram & ".btp"
Define FILE_HLP			ApplicationDirectory$() & xProgram & ".pdf"


'-------------------------------------
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\HEXAGONLib.def"
Include "Library\MAPPERLib.def"
Include "Library\ProgramInfo.def"
Include "Library\RIBBONLib.def"
Include "Library\TABLELib.def"

Include "DLGHexagonSettings.def"

'-----------------------------------------------------------------------------------------
Declare Sub Main
Declare Sub EndProgram
Declare Sub EndHandler

Declare Sub MENUHexagonPointyForMapExtent
Declare Sub MENUHexagonFlatForMapExtent
Declare Sub MENUHexagonsForMapExtent(ByVal nHexagonType As Integer)
Declare Sub MENUHexagons

Dim	msPath As String

'**********************************************************************************************''
'**   Created by Peter Horsbøll Møller, Pitney Bowes
'
'**********************************************************************************************''
Sub Main

Dim	nCtrlIdx, nResult As Integer,
	sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName As String

OnError GoTo ErrorOccured

	'***Initializing ApplicationInfo
	Call PRGISetApplicationName(xProgram)
	Call PRGISetApplicationVersion(xVersion)
	Call PRGISetApplicationCopyrightYear(xYear)
	Call PRGISetApplicationDevelopedBy("Peter Horsbøll Møller")
	CAll PRGISetApplicationImageUri(ApplicationDirectory$() & "Images\Hexagons_32.png")
	Call PRGISetApplicationHelpFile(FILE_HLP)

	Call DLGHSSetConfigFileName(FILE_INI)
	Call DLGHSReadConfigFile

	'***Enabling Debug if file exists
	Call DEBUGEnableByFile(FILE_DBG)

'	Alter Menu ID 4 Add
'		"Create Pointy Hexagons for Map Extent"
'			HelpMsg ""
'				Calling MENUHexagonPointyForMapExtent,
'		"Create Flat Hexagons for Map Extent"
'			HelpMsg ""
'				Calling MENUHexagonFlatForMapExtent

	sTabName				= TAB_SPATIAL
	sGroupName			= TAB_GROUP_SPATIAL_CREATE
	sSplitButtonName		= "SpatialCreateRegionsSplitButton"
	sSplitButtonGroupName	= "SpatialCreateRegionsMenuGroup"

'	nCtrlIdx = RBNSplitButtonGroupAddControl("sepTransformSplitButton", "", ""
'		, ControlType_ContextMenuSeparator, sTabName, sGroupName
'		, sSplitButtonName, sSplitButtonGroupName)

	nCtrlIdx = RBNSplitButtonGroupAddControl("cmdHexagons", "Hexagons", "", ControlType_Button, sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName)
	If nCtrlIdx > 0 Then
		'Create & Set the button tooltip
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Create hexagons.", "")
		'Set the button icon
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", ApplicationDirectory$() & "Images\Hexagons_32.png")
		'Set Custom MapBasic Handle to the button
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUHexagons")
	End If

	nResult = RBNRegisterFunctionAsPublic("HEXCreatePointy", "HEXCreatePointy", "Creates a pointy Hexagon of a given size around an input point")
	nResult = RBNRegisterFunctionAsPublic("HEXCreateFlat", "HEXCreateFlat", "Creates a flat Hexagon of a given size around an input point")
	nResult = RBNRegisterFunctionAsPublic("HEXCreatePointyForExtent", "HEXCreatePointyForExtent", "Creates pointy Hexagons for a given extent")
	nResult = RBNRegisterFunctionAsPublic("HEXCreatePointyForMap", "HEXCreatePointyForMap", "Creates pointy Hexagons for a given extent")
	nResult = RBNRegisterFunctionAsPublic("HEXCreateFlatForMap", "HEXCreateFlatForMap", "Creates flat Hexagons for a given extent")
	nResult = RBNRegisterFunctionAsPublic("HEXCreateForMap", "HEXCreateForMap", "Creates flat Hexagons for a given map")
	nResult = RBNRegisterFunctionAsPublic("HEXCreateForObject", "HEXCreateForObject", "Creates Hexagons for a given feature/object")
	nResult = RBNRegisterFunctionAsPublic("HEXCreateForExtent", "HEXCreateForExtent", "Creates Hexagons for a given extent")
	nResult = RBNRegisterFunctionAsPublic("HEXPCreateForExtent", "HEXPCreateForExtent", "Creates Hexagons for a given extent")
	nResult = RBNRegisterFunctionAsPublic("HEXPCreateForMap", "HEXPCreateForMap", "Creates Hexagons for a given map")

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Main")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes
'**   Ending MapBasic application
'****************************************
Sub EndProgram

OnError GoTo ErrorOccured

	End Program
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Pitney Bowes
'**   Ending MapBasic application
'****************************************
Sub EndHandler

OnError GoTo ErrorOccured

	Call RBNEndHandler
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUHexagonPointyForMapExtent

	OnError GoTo ErrorOccured

	Call MENUHexagonsForMapExtent(HEX_TYPE_POINTY)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUHexagonPointyForMapExtent")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUHexagonFlatForMapExtent

	OnError GoTo ErrorOccured

	Call MENUHexagonsForMapExtent(HEX_TYPE_FLAT)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUHexagonFlatForMapExtent")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUHexagonsForMapExtent(ByVal nHexagonType As Integer)

Dim	sTab, sTabFile As String,
	nMID, nNumHex As Integer

OnError GoTo ErrorOccured

	Call HEXSetUseBaseForHexagon(TRUE)

	sTabFile = FileSaveAsDlg(msPath, "Hexagons", "TAB", "Specify name and location of hexagons grid file...")
	If sTabFile = "" Then
		Exit Sub
	End If

	nMID = FrontWindow()
	If nMID = 0 Then
		Exit Sub
	ElseIf NOT WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Exit Sub
	End If

	sTab	= PathToTableName$(sTabFile)
	If TABIsOpen(sTab) Then
		If Ask("Close currently open table named '" & sTab & "'?", "Yes", "Abort") Then
			Exit Sub
		End If
	End If

	Create Table sTab
		( HEXNO Char(20)
		, SPATIALCASE Char(50)
		)
		Type NATIVEX
		File sTabFile

	Create Map
		For sTab
		CoordSys Window nMID

	Set Table sTab Redraw Off
	Set Table sTab FastEdit On
	Set Coordsys Table sTab
	nNumHex = HEXCreateForMap(sTab, "HEXNO", 10000, "m", nMID, HEX_CALC_TYPE_CARTESIAN, nHexagonType)
	Commit Table sTab
	Set Table sTab Redraw On

	Add Map
		Window nMID
		Layer sTab

	Call RBNNotificationShow("Creating Hexagons", FormatNumber$(HEXNumCreated()) & " hexagons created in " & FormatNumber$(HEXTimeSpent()) & " secs", Notify_Info, 5000)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUHexagonsForMapExtent")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub MENUHexagons

Dim	nMID, nNumHex As Integer,
	penCur As Pen, brsCur As Brush

OnError GoTo ErrorOccured

	nMID = FrontWindow()
	If nMID = 0 Then
		If NOT SelectionInfo(SEL_INFO_NROWS) = 1 Then
			Exit Sub
		End If
	ElseIf NOT WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		If NOT SelectionInfo(SEL_INFO_NROWS) = 1 Then
			Exit Sub
		End If
	End If
	If NOT nMID = 0 Then
		Set Coordsys Window nMID
	Else
		Set CoordSys Table SelectionInfo(SEL_INFO_TABLENAME)
	End If

	If NOT DLGHexagonSettings() Then
		Exit Sub
	End If

	If TABIsOpen(DLGHSHexagonTable()) Then
		Close Table DLGHSHexagonTable()
	End If

	Create Table DLGHSHexagonTable()
		( HEXNO Char(20)
		, SPATIALCASE Char(50)
		)
		Type NATIVEX
		File DLGHSHexagonTabFile()

	If DLGHSInputType() = HEX_INPUT_TYPE_MAP Then
		Create Map
			For DLGHSHexagonTable()
			CoordSys Window nMID
	Else
		Create Map
			For DLGHSHexagonTable()
			CoordSys Table SelectionInfo(SEL_INFO_TABLENAME)
	End If

	penCur	= CurrentBorderPen()
	brsCur	= CurrentBrush()
	Set Style BorderPen DLGHSHexagonPen()
	Set Style Brush DLGHSHexagonBrush()

	Set Table DLGHSHexagonTable() Redraw Off
	Set Table DLGHSHexagonTable() FastEdit On
	Set Coordsys Table DLGHSHexagonTable()

	Dim fSize As Float
	Dim sUnit As String
	Dim nCalculationType As Integer
	Dim nHexagonType As Integer
	Dim oExtent As Object
	fSize			= DLGHSHexagonSize()
	sUnit			= DLGHSHexagonUnit()
	nCalculationType	= DLGHSCalculationType()
	nHexagonType		= DLGHSHexagonType()

	If DLGHSInputType() = HEX_INPUT_TYPE_MAP Then
		nMID				= DLGHSHexagonExtentMID()
'		Call DEBUGPrint("HEXCreateForMap(" & DLGHSHexagonTable() & ", HEXNO, " & fSize & ", " & sUnit & ", " & nMID & ", " & nCalculationType & ", " & nHexagonType & ")")
		nNumHex = HEXCreateForMap(DLGHSHexagonTable(), "HEXNO", fSize, sUnit, nMID, nCalculationType, nHexagonType)
		'nNumHex = HEXCreateForMap(DLGHSHexagonTable(), "HEXNO", DLGHSHexagonSize(), DLGHSHexagonUnit(), DLGHSHexagonExtentMID(), DLGHSCalculationType(), DLGHSHexagonType())
	Else
		oExtent = DLGHSHexagonExtentOBJ()
		nNumHex = HEXCreateForObject(DLGHSHexagonTable(), "HEXNO", fSize, sUnit, oExtent, nCalculationType, nHexagonType)
'		nNumHex = HEXCreateForObject(DLGHSHexagonTable(), "HEXNO", DLGHSHexagonSize(), DLGHSHexagonUnit(), DLGHSHexagonExtentOBJ(), DLGHSCalculationType(), DLGHSHexagonType())
	End If
	Commit Table DLGHSHexagonTable()
	Set Table DLGHSHexagonTable() Redraw On

	If not DLGHSHexagonExtentMID() = 0 Then
		Add Map
			Window DLGHSHexagonExtentMID()
			Layer DLGHSHexagonTable()
	End If

	Set Style BorderPen penCur
	Set Style Brush brsCur

	Call DLGHSWriteConfigFile
	Call RBNNotificationShow("Creating Hexagons", FormatNumber$(HEXNumCreated()) & " hexagons created in " & FormatNumber$(HEXTimeSpent()) & " secs", Notify_Info, 5000)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUHexagons")
	Call ERRShow()

End Sub